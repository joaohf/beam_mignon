<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>traces on BEAM Mignon</title><link>https://beam-mignon.netlify.app/series/traces/</link><description>Recent content in traces on BEAM Mignon</description><generator>Hugo -- gohugo.io</generator><language>pt-br</language><copyright>https://creativecommons.org/licenses/by/4.0/</copyright><lastBuildDate>Wed, 11 Sep 2019 22:43:50 +0200</lastBuildDate><atom:link href="https://beam-mignon.netlify.app/series/traces/feed.xml" rel="self" type="application/rss+xml"/><item><title>meta-erlang com LTTng</title><link>https://beam-mignon.netlify.app/posts/mignon-16/</link><pubDate>Wed, 11 Sep 2019 22:43:50 +0200</pubDate><guid>https://beam-mignon.netlify.app/posts/mignon-16/</guid><description>Neste post vamos ativar o suporte LTTng na BEAM VM usando o projeto Yocto com a layer meta-erlang. O objetivo é demonstrar como podemos fazer a análise de um problema utilizando esta abordagem.
Caso nunca tenha ouvido falar do projeto Yocto, tenha em mente que os conhecimentos usados aqui funcionam para qualquer distribuição Linux.
Basicamente vamos explorar quatro grandes blocos:
BEAM VM, com suporte ao LTTng habilitado Yocto Project, onde vamos usar uma distro básica com Erlang Tracecompass, um plugin do projeto Eclipse para visualização e monitoramento de traces Um código de exemplo em Erlang, apresentando algum problema no qual podemos visualizar com o LTTng.</description></item><item><title>Ativando traces usando LTTng</title><link>https://beam-mignon.netlify.app/posts/mignon-15/</link><pubDate>Mon, 09 Sep 2019 21:33:50 +0200</pubDate><guid>https://beam-mignon.netlify.app/posts/mignon-15/</guid><description>Neste post vamos descobrir como podemos instrumentar aplicações Erlang/Elixir dinamicamente.
Trace dinâmicos Um trace dinâmico é um conjunto de bibliotecas nas quais permitem instrumentar partes do sistema em tempo de execução, com o objetivo de extrair métricas de performance, ajudando na resolução de problemas.
Geralmente estes traces possibilitam uma visão fim-a-fim envolvendo a aplicação e chamadas de sistema.
Trace BEAM Existem três modos de utilizar traces dinâmicos no BEAM. Sendo dependente do Sistema Operacional:</description></item><item><title>Trace instrumentando o código com dbg</title><link>https://beam-mignon.netlify.app/posts/mignon-12/</link><pubDate>Sat, 17 Aug 2019 12:15:50 +0200</pubDate><guid>https://beam-mignon.netlify.app/posts/mignon-12/</guid><description>Este post é sobre como instrumentar uma aplicação e coletar traces para posterior analise. A ideia veio deste post: Erlang trace files in Wireshark e também deste código hackney_trace.erl.
Aqui estamos falando de como utilizar a BEAM VM para capturar traces da aplicação. Podemos usar trace nas seguintes situações:
low level information próprio para debug do software queremos localizar extamente o ponto que ocorre algum evento as informações são destinadas para o desenvolvedor adicionar e remover trace devem ser rápidos Um módulo em Elixir pode ser construído para instrumentar uma aplicação com pontos de trace.</description></item></channel></rss>