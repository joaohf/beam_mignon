<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vamos testar on BEAM Mignon</title><link>https://beam-mignon.netlify.app/series/vamos-testar/</link><description>Recent content in vamos testar on BEAM Mignon</description><generator>Hugo -- gohugo.io</generator><language>pt-br</language><copyright>https://creativecommons.org/licenses/by/4.0/</copyright><lastBuildDate>Tue, 13 Aug 2019 18:17:50 +0200</lastBuildDate><atom:link href="https://beam-mignon.netlify.app/series/vamos-testar/feed.xml" rel="self" type="application/rss+xml"/><item><title>Vamos testar: exunit</title><link>https://beam-mignon.netlify.app/posts/mignon-5/</link><pubDate>Tue, 13 Aug 2019 18:17:50 +0200</pubDate><guid>https://beam-mignon.netlify.app/posts/mignon-5/</guid><description>ExUnit é o framework padrão quando falamos de testes em Elixir. Ele é simples e ao mesmo tempo poderoso.
Todos os testes em Elixir ficam separados da implementação, geralmente no diretório test. Todos os arquivos teste diretório que seguem o padrão de nome: &amp;lt;nome do teste&amp;gt;_test.exs são compilados e executados como testes pelo comando mix test.
Cada teste é implementado dentro de um módulo normal no usa as macros contidas no ExUnit.</description></item><item><title>Elixir: mocks, stubs</title><link>https://beam-mignon.netlify.app/posts/mignon-11/</link><pubDate>Tue, 13 Aug 2019 17:43:50 +0200</pubDate><guid>https://beam-mignon.netlify.app/posts/mignon-11/</guid><description>As duas abordagens abaixo servem para configurar um projeto para utilizar mocks durante os testes.
Abordagem 1: mocks sem ajuda O arquivo mix.exs deve ser ajustado acrescentando um diretório adicional para a propriedade elixirc_paths:
def project do [app: :coffee_fsm, version: &amp;#34;0.1.0&amp;#34;, elixir: &amp;#34;~&amp;gt; 1.4&amp;#34;, elixirc_paths: elixirc_paths(Mix.env), build_embedded: Mix.env == :prod, start_permanent: Mix.env == :prod, deps: deps()] end def application do # Specify extra applications you&amp;#39;ll use from Erlang/Elixir [extra_applications: [:logger]] end defp elixirc*paths(:test), do: [&amp;#34;lib&amp;#34;,&amp;#34;test/support&amp;#34;] defp elixirc_paths(*), do: [&amp;#34;lib&amp;#34;] Quando MIX_ENV for test a função elixirc_paths/1 retorna uma lista com dois diretórios onde existe código Elixir para ser compilado.</description></item><item><title>Vamos testar: lux</title><link>https://beam-mignon.netlify.app/posts/mignon-9/</link><pubDate>Tue, 06 Aug 2019 21:43:50 +0200</pubDate><guid>https://beam-mignon.netlify.app/posts/mignon-9/</guid><description>lux é um framework para automação de testes utilizando o estilo Expect (https://en.wikipedia.org/wiki/Expect, https://core.tcl-lang.org/expect/index).
A ideia básica é a definição de um script contendo os comandos usados para testar alguma aplicação e tambem colocando algumas marcações no script que irão controlar o lux.
Este framework provê mecanismos de fazer uma automação de testes, ou seja, aqueles comandos que são utilizados para testar alguma aplicação podem ser escritos em uma forma bem simples nos quais o lux vai controlar a execução.</description></item><item><title>Vamos testar: common_test</title><link>https://beam-mignon.netlify.app/posts/mignon-4/</link><pubDate>Tue, 06 Aug 2019 21:30:50 +0200</pubDate><guid>https://beam-mignon.netlify.app/posts/mignon-4/</guid><description>common_test é uma das aplicações mais interessantes que acompanha a distribuição Erlang/OTP. Digo isso pois os casos de uso que a ferramenta resolve são baseados em casos reais da indústria. Podemos realizar vários tipos de testes, por exemplo:
black-box, utilizando algum protocolo de comunicação: ssh, netconf, telnet, ftp white-box, para testar aplicações escritas em Erlang ou Elixir, fazendo chamadas reais unit tests, há vários projetos que utilizam somente o common_test para implementar todos os testes necessários É possível criar suites de testes com várias formas de execução dos testes e organização.</description></item><item><title>Vamos testar: eunit</title><link>https://beam-mignon.netlify.app/posts/mignon-3/</link><pubDate>Tue, 06 Aug 2019 21:00:50 +0200</pubDate><guid>https://beam-mignon.netlify.app/posts/mignon-3/</guid><description>eunit é um framework para testes leves e parte da distribuição Erlang/OTP padrão.
Os testes podem ser definidos dentro de cada módulo, dentro de blocos
-ifdef(EUNIT). % test code here ... -endif. Ou em arquivos separados, geralmente dentro do diretório test, em uma base de código.
A filosofia do framework segue a linha XUnit, mas adaptado para o conceito funcional.
Vejo duas principais vantagens para definir os testes dentro de módulos:</description></item></channel></rss>