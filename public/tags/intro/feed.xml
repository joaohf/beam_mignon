<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>intro on BEAM Mignon</title><link>https://beam-mignon.netlify.app/tags/intro/</link><description>Recent content in intro on BEAM Mignon</description><generator>Hugo -- gohugo.io</generator><language>pt-br</language><copyright>https://creativecommons.org/licenses/by/4.0/</copyright><lastBuildDate>Mon, 02 Nov 2020 19:30:00 +0200</lastBuildDate><atom:link href="https://beam-mignon.netlify.app/tags/intro/feed.xml" rel="self" type="application/rss+xml"/><item><title>mermaid com edoc ou ex_docs</title><link>https://beam-mignon.netlify.app/posts/mignon-30/</link><pubDate>Mon, 02 Nov 2020 19:30:00 +0200</pubDate><guid>https://beam-mignon.netlify.app/posts/mignon-30/</guid><description>Documentar o código é parte do processo de design e implementação de um software. Ajuda a clarear a mente, ordenar conceitos e passos. Além de induzir os questionamento e também simplificação de código.
Em muitos projetos e times, documentar é preciso pois não se sabe como vai ser a configuração do time ao médio e longo prazo. Pode ser que novos integrantes entrem e os mais antigos sejam deslocados para outras funções e com eles boa parte do conhecimento.</description></item><item><title>Opções para repositório de pacotes hex.pm</title><link>https://beam-mignon.netlify.app/posts/mignon-14/</link><pubDate>Fri, 30 Aug 2019 22:43:50 +0200</pubDate><guid>https://beam-mignon.netlify.app/posts/mignon-14/</guid><description>Quando desenvolvemos em Elixir ou Erlang, de forma open source, geralmente publicamos o código em um repositório de código público e também divulgamos no hex.pm para que outros usuários possam encontrar e usar.
Mas como podemos tornar o processo de publicação eficiente dentro de uma empresa ? A seguir, algumas formas de resolver.
Em diversas empresas, após construir alguns códigos, isolar em funcionalidades específicas e transformar em bibliotecas Elixir ou Erlang.</description></item><item><title>Erlang Ecosystem Foundation</title><link>https://beam-mignon.netlify.app/posts/mignon-13/</link><pubDate>Tue, 27 Aug 2019 22:43:50 +0200</pubDate><guid>https://beam-mignon.netlify.app/posts/mignon-13/</guid><description>Este post é uma pequena nota sobre Erlang Ecosystem Foundation. Basicamente é uma organização sem fins lucrativos onde um conjunto de membros trabalham em diversos grupos de trabalho.
Os seguintes grupos de trabalho foram definidos inicialmente:
Marketing Fellowship Security Observability Sponsorship Erlang Ecosystem Foundation Building and Packaging Education, Training, &amp;amp; Adoption Documentation Qualquer pessoa ou empresa pode fazer parte da EEF gratuitamente. Podendo, se quiser, fazer doações de horas trabalhando em determinados projetos de algum grupo de trabalho ou ajudando financeiramente a EFF.</description></item><item><title>Erlang: bad parts</title><link>https://beam-mignon.netlify.app/posts/mignon-10/</link><pubDate>Sun, 11 Aug 2019 21:43:50 +0200</pubDate><guid>https://beam-mignon.netlify.app/posts/mignon-10/</guid><description>Alguns comentários sobre as questões contidas nesta apresentação On Network Configuration, Distributed and Concurrent Programming with Erlang Chalmers sobre o tema &amp;ldquo;Erlang bad parts&amp;rdquo;:
The syntax
Pessoalmente, eu acho a sintaxe da linguagem (tanto Erlang quanto Elixir) bem prática. Mas ao mesmo tempo, se você comparar com qualquer outra linguagem (exemplo: C ou Javascript) vai notar algumas construções esquisitas.
Mas, depois de um tempo tudo fica confortável e prático. A dica aqui é não focar na sintaxe, busque entender o paradigma funcional e como a sintaxe ajuda nisso.</description></item><item><title>Como vejo a BEAM VM</title><link>https://beam-mignon.netlify.app/posts/mignon-2/</link><pubDate>Mon, 22 Jul 2019 22:43:50 +0200</pubDate><guid>https://beam-mignon.netlify.app/posts/mignon-2/</guid><description>BEAM VM BEAM VM é o nome formal da máquina virtual no qual algumas linguagens de programação utilizam para executar as instruções de um programa.
As principais linguagens são: Erlang e Elixir. Mas existem outras:
luerl efene clojerl Erlang Erlang github https://www.erlang.org/ Jira É uma linguagem de programação funcional com primitivas de concorrência integrados na linguagem.
Geralmente os programas são organizados em módulos contendo funções privadas e públicas. Eu gosto de comparar com programas escritos em linguagem C (apesar do paradigma ser bem diferente, a estrutura e organização é similar, ou seja, funções e módulos).</description></item><item><title>No Meio do Caminho tinha uma pedra</title><link>https://beam-mignon.netlify.app/posts/mignon-1/</link><pubDate>Sun, 21 Jul 2019 22:43:50 +0200</pubDate><guid>https://beam-mignon.netlify.app/posts/mignon-1/</guid><description>Como conheci Erlang/OTP Tudo começou em 2009 quando estava procurando alguma biblioteca opensource já pronto e testado para um protocolo chamado MEGACO, H.248. Após algumas pesquisas encontrei algo sobre Erlang, mas não tinha entendido nada e muito menos como integrar com o trabalho que tinha que fazer utilizando linguagem C em uma plataforma embarcada. Então abandonei a ideia mas mantive o nome da linguagem na lista de coisas para estudar.</description></item><item><title>Introdução do BEAM Mignon</title><link>https://beam-mignon.netlify.app/posts/mignon-0/</link><pubDate>Sat, 20 Jul 2019 22:43:50 +0200</pubDate><guid>https://beam-mignon.netlify.app/posts/mignon-0/</guid><description>Um blog em português A ideia inicial é construir algum tipo de documentação em Português, com links e referências interessantes nas quais possam ser utilizadas no futuro.
De fato não há muita documentação sobre Erlang e Elixir em português. Fico pensando como novos desenvolvedores podem utilizar estas tecnologias (BEAM, Erlang, Elixir) e creio que escrevendo posso ajudar. Lembrando que a linguagem Elixir foi inventada por um brasileiro, mas se tornou popular fora do Brasil, talvez um blog em Português possa ajudar a comunidade brasileira.</description></item></channel></rss>